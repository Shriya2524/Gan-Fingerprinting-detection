{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12902846,"sourceType":"datasetVersion","datasetId":8163930},{"sourceId":12903173,"sourceType":"datasetVersion","datasetId":8164165},{"sourceId":12903205,"sourceType":"datasetVersion","datasetId":8164189},{"sourceId":12911685,"sourceType":"datasetVersion","datasetId":8169739}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nprint(\"CUDA available:\", torch.cuda.is_available())\nprint(\"GPU device name:\", torch.cuda.get_device_name(0) if torch.cuda.is_available() else \"No GPU detected\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T08:09:50.016563Z","iopub.execute_input":"2025-09-05T08:09:50.016743Z","iopub.status.idle":"2025-09-05T08:09:54.009978Z","shell.execute_reply.started":"2025-09-05T08:09:50.016727Z","shell.execute_reply":"2025-09-05T08:09:54.009163Z"}},"outputs":[{"name":"stdout","text":"CUDA available: True\nGPU device name: Tesla P100-PCIE-16GB\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/stylegan-dataset/Final Dataset'\nprint(\"Contents:\", os.listdir(input_path))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T08:09:54.011056Z","iopub.execute_input":"2025-09-05T08:09:54.011554Z","iopub.status.idle":"2025-09-05T08:09:54.020732Z","shell.execute_reply.started":"2025-09-05T08:09:54.011527Z","shell.execute_reply":"2025-09-05T08:09:54.020062Z"}},"outputs":[{"name":"stdout","text":"Contents: ['Fake', 'Real', 'dataset.csv']\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import os\nfrom PIL import Image\nimport numpy as np\n\ndef preprocess_recursive(input_path, output_path, target_size=(256, 256)):\n    os.makedirs(output_path, exist_ok=True)\n    processed_count = 0\n    error_count = 0\n    for root, _, files in os.walk(input_path):\n        rel_root = os.path.relpath(root, input_path)\n        out_dir = os.path.join(output_path, rel_root)\n        os.makedirs(out_dir, exist_ok=True)\n        for img_name in files:\n            if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):\n                continue\n            img_path = os.path.join(root, img_name)\n            out_path = os.path.join(out_dir, img_name)\n            try:\n                img = Image.open(img_path).convert('RGB')\n                img = img.resize(target_size, Image.LANCZOS) \n                arr = np.asarray(img) / 255.0  \n                img_out = Image.fromarray((arr * 255).astype(np.uint8))\n                img_out.save(out_path)\n                processed_count += 1\n            except Exception as e:\n                error_count += 1\n                print(f\"Error with {img_path}: {e}\")\n    print(f\"✅ Preprocessing done. Success: {processed_count}, Errors: {error_count}\")\n\n\npreprocess_recursive('/kaggle/input/stylegan-dataset/Final Dataset', 'preprocessed_datasets/stylegan', target_size=(256, 256))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T08:09:54.022595Z","iopub.execute_input":"2025-09-05T08:09:54.022891Z","iopub.status.idle":"2025-09-05T08:11:27.799902Z","shell.execute_reply.started":"2025-09-05T08:09:54.022873Z","shell.execute_reply":"2025-09-05T08:11:27.799248Z"}},"outputs":[{"name":"stdout","text":"✅ Preprocessing done. Success: 12890, Errors: 0\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/cyclegan-dataset'\nprint(\"Contents:\", os.listdir(input_path))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T08:11:27.800656Z","iopub.execute_input":"2025-09-05T08:11:27.801181Z","iopub.status.idle":"2025-09-05T08:11:27.808069Z","shell.execute_reply.started":"2025-09-05T08:11:27.801149Z","shell.execute_reply":"2025-09-05T08:11:27.807335Z"}},"outputs":[{"name":"stdout","text":"Contents: ['testB', 'testA', 'trainB', 'trainA', 'metadata.csv']\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/dataset'\nprint(\"Contents:\", os.listdir(input_path))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T08:11:27.808807Z","iopub.execute_input":"2025-09-05T08:11:27.809001Z","iopub.status.idle":"2025-09-05T08:11:27.823205Z","shell.execute_reply.started":"2025-09-05T08:11:27.808985Z","shell.execute_reply":"2025-09-05T08:11:27.822679Z"}},"outputs":[{"name":"stdout","text":"Contents: ['Celeb-DF', 'Celeb-DF-v2']\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import os\nfrom PIL import Image\nimport numpy as np\n\ndef preprocess_cyclegan(split_path, output_path, target_size=(256, 256)):\n    os.makedirs(output_path, exist_ok=True)\n    processed_count = 0\n    error_count = 0\n\n    for root, _, files in os.walk(split_path):\n        rel_root = os.path.relpath(root, split_path)\n        out_dir = os.path.join(output_path, rel_root)\n        os.makedirs(out_dir, exist_ok=True)\n\n        for img_name in files:\n            if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):\n                continue\n\n            img_path = os.path.join(root, img_name)\n            out_path = os.path.join(out_dir, img_name)\n\n            try:\n                img = Image.open(img_path).convert('RGB')\n                img = img.resize(target_size, Image.LANCZOS)\n                arr = np.asarray(img) / 255.0\n                img_out = Image.fromarray((arr * 255).astype(np.uint8))\n                img_out.save(out_path)\n                processed_count += 1\n            except Exception as e:\n                error_count += 1\n                print(f\"Error processing {img_path}: {e}\")\n\n    print(f\"CycleGAN split preprocessing done. Success: {processed_count}, Errors: {error_count}\")\n\nbase_path = '/kaggle/input/cyclegan-dataset'\nsplits = ['trainA', 'trainB', 'testA', 'testB']\n\nfor split in splits:\n    input_dir = os.path.join(base_path, split)\n    output_dir = f'preprocessed_datasets/cyclegan_{split}'\n    preprocess_cyclegan(input_dir, output_dir)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T08:11:27.823836Z","iopub.execute_input":"2025-09-05T08:11:27.824044Z","iopub.status.idle":"2025-09-05T08:11:45.831997Z","shell.execute_reply.started":"2025-09-05T08:11:27.824018Z","shell.execute_reply":"2025-09-05T08:11:45.831341Z"}},"outputs":[{"name":"stdout","text":"CycleGAN split preprocessing done. Success: 1067, Errors: 0\nCycleGAN split preprocessing done. Success: 1334, Errors: 0\nCycleGAN split preprocessing done. Success: 120, Errors: 0\nCycleGAN split preprocessing done. Success: 140, Errors: 0\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"import os\nimport cv2\nfrom PIL import Image\nimport numpy as np\n\ndef extract_and_preprocess_frames(video_path, output_folder, target_size=(256, 256), frame_interval=3):\n    os.makedirs(output_folder, exist_ok=True)\n    cap = cv2.VideoCapture(video_path)\n    count = 0\n    success = True\n    while success:\n        success, frame = cap.read()\n        if not success:\n            break\n        if count % frame_interval == 0: \n            img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))\n            img = img.resize(target_size, Image.LANCZOS)\n            arr = np.asarray(img) / 255.0\n            img_out = Image.fromarray((arr * 255).astype(np.uint8))\n            img_out.save(os.path.join(output_folder, f\"{os.path.splitext(os.path.basename(video_path))[0]}_frame{count}.jpg\"))\n        count += 1\n    cap.release()\n\ndef preprocess_videos_recursive(input_path, output_root, target_size=(256, 256), frame_interval=3):\n    for root, _, files in os.walk(input_path):\n        rel_path = os.path.relpath(root, input_path)\n        out_dir = os.path.join(output_root, rel_path)\n        os.makedirs(out_dir, exist_ok=True)\n\n        for file in files:\n            if file.lower().endswith('.mp4'):\n                video_path = os.path.join(root, file)\n                extract_and_preprocess_frames(video_path, out_dir, target_size, frame_interval)\n\ncelebdf_base = '/kaggle/input/dataset/Celeb-DF'\ncelebdfv2_base = '/kaggle/input/dataset/Celeb-DF-v2'\n\npreprocess_videos_recursive(celebdf_base, '/kaggle/working/preprocessed_datasets/Celeb-DF', target_size=(256, 256), frame_interval=3)\npreprocess_videos_recursive(celebdfv2_base, '/kaggle/working/preprocessed_datasets/Celeb-DF-v2', target_size=(256, 256), frame_interval=3)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T08:11:45.832764Z","iopub.execute_input":"2025-09-05T08:11:45.833026Z","iopub.status.idle":"2025-09-05T11:23:55.664570Z","shell.execute_reply.started":"2025-09-05T08:11:45.833000Z","shell.execute_reply":"2025-09-05T11:23:55.664006Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/progan'\nprint(\"Contents:\", os.listdir(input_path))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T11:23:55.665284Z","iopub.execute_input":"2025-09-05T11:23:55.665520Z","iopub.status.idle":"2025-09-05T11:23:55.672981Z","shell.execute_reply.started":"2025-09-05T11:23:55.665502Z","shell.execute_reply":"2025-09-05T11:23:55.672200Z"}},"outputs":[{"name":"stdout","text":"Contents: ['pggan_v1', 'pggan_v2']\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"import os\nfrom PIL import Image\nimport numpy as np\n\ndef preprocess_progan(input_base, output_base, target_size=(256, 256)):\n    for subfolder in ['pggan_v1', 'pggan_v2']:\n        input_path = os.path.join(input_base, subfolder)\n        output_path = os.path.join(output_base, subfolder)\n        os.makedirs(output_path, exist_ok=True)\n        processed_count = 0\n        error_count = 0\n        for root, _, files in os.walk(input_path):\n            rel_root = os.path.relpath(root, input_path)\n            out_dir = os.path.join(output_path, rel_root)\n            os.makedirs(out_dir, exist_ok=True)\n            for img_name in files:\n                if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):\n                    continue\n                img_path = os.path.join(root, img_name)\n                out_path = os.path.join(out_dir, img_name)\n                try:\n                    img = Image.open(img_path).convert('RGB')\n                    img = img.resize(target_size, Image.LANCZOS)\n                    arr = np.asarray(img) / 255.0\n                    img_out = Image.fromarray((arr * 255).astype(np.uint8))\n                    img_out.save(out_path)\n                    processed_count += 1\n                except Exception as e:\n                    error_count += 1\n                    print(f\"Error with {img_path}: {e}\")\n        print(f\"✅ Preprocessing {subfolder} done. Success: {processed_count}, Errors: {error_count}\")\n\nprogan_input = '/kaggle/input/progan'\nprogan_output = '/kaggle/working/preprocessed_datasets/progan'\npreprocess_progan(progan_input, progan_output, target_size=(256, 256))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T11:23:55.674662Z","iopub.execute_input":"2025-09-05T11:23:55.674854Z","iopub.status.idle":"2025-09-05T11:50:57.831319Z","shell.execute_reply.started":"2025-09-05T11:23:55.674838Z","shell.execute_reply":"2025-09-05T11:50:57.830608Z"}},"outputs":[{"name":"stdout","text":"✅ Preprocessing pggan_v1 done. Success: 19943, Errors: 0\n✅ Preprocessing pggan_v2 done. Success: 19962, Errors: 0\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"import os\nimport numpy as np\nfrom PIL import Image\nimport cv2\nfrom skimage.feature import local_binary_pattern\nfrom scipy.fftpack import fft2\n\ndef extract_spatial_features(img_arr):\n    gray = cv2.cvtColor(img_arr, cv2.COLOR_RGB2GRAY)\n    lbp = local_binary_pattern(gray, 8, 1, 'uniform')\n    return lbp.mean(), lbp.std()\n\ndef extract_color_features(img_arr):\n    r_mean = img_arr[:,:,0].mean()\n    g_mean = img_arr[:,:,1].mean()\n    b_mean = img_arr[:,:,2].mean()\n    r_std = img_arr[:,:,0].std()\n    g_std = img_arr[:,:,1].std()\n    b_std = img_arr[:,:,2].std()\n    return r_mean, g_mean, b_mean, r_std, g_std, b_std\n\ndef extract_frequency_features(img_arr):\n    gray = cv2.cvtColor(img_arr, cv2.COLOR_RGB2GRAY)\n    f = np.abs(fft2(gray))\n    return f.mean(), f.std(), np.percentile(f, 95)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T12:16:02.382073Z","iopub.execute_input":"2025-09-05T12:16:02.382333Z","iopub.status.idle":"2025-09-05T12:16:02.768788Z","shell.execute_reply.started":"2025-09-05T12:16:02.382312Z","shell.execute_reply":"2025-09-05T12:16:02.768213Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"input_dir = '/kaggle/working/preprocessed_datasets/progan' \noutput_csv = '/kaggle/working/features_progan.csv'\n\nimport csv\n\nfeature_list = []\nlabel_list = []\n\nfor class_folder in os.listdir(input_dir):\n    class_path = os.path.join(input_dir, class_folder)\n    if not os.path.isdir(class_path): continue\n    for root, _, files in os.walk(class_path):\n        for fname in files:\n            if not fname.lower().endswith(('.png', '.jpg', '.jpeg')):\n                continue\n            img_path = os.path.join(root, fname)\n            try:\n                img = np.array(Image.open(img_path).convert('RGB'))\n                # Extract features\n                spatial = extract_spatial_features(img)\n                color = extract_color_features(img)\n                freq = extract_frequency_features(img)\n                features = spatial + color + freq\n                feature_list.append(features)\n                label_list.append(class_folder) \n            except Exception as e:\n                print(f\"Error: {img_path} {e}\")\n\nwith open(output_csv, 'w', newline='') as csvfile:\n    writer = csv.writer(csvfile)\n    header = ['spatial_mean', 'spatial_std', 'r_mean', 'g_mean', 'b_mean', 'r_std', 'g_std', 'b_std', \n              'freq_mean', 'freq_std', 'freq_95perc', 'label']\n    writer.writerow(header)\n    for feat, label in zip(feature_list, label_list):\n        writer.writerow(list(feat) + [label])\n\nprint(f\"Features extracted and saved to {output_csv}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T12:18:31.847168Z","iopub.execute_input":"2025-09-05T12:18:31.847941Z","iopub.status.idle":"2025-09-05T12:28:53.830761Z","shell.execute_reply.started":"2025-09-05T12:18:31.847914Z","shell.execute_reply":"2025-09-05T12:28:53.830022Z"}},"outputs":[{"name":"stdout","text":"Features extracted and saved to /kaggle/working/features_progan.csv\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"import os\nprint(os.listdir('/kaggle/working'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T12:37:01.081229Z","iopub.execute_input":"2025-09-05T12:37:01.081523Z","iopub.status.idle":"2025-09-05T12:37:01.086105Z","shell.execute_reply.started":"2025-09-05T12:37:01.081501Z","shell.execute_reply":"2025-09-05T12:37:01.085306Z"}},"outputs":[{"name":"stdout","text":"['.virtual_documents', 'preprocessed_datasets', 'features_progan.csv']\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"import pandas as pd\ndf = pd.read_csv('/kaggle/working/features_progan.csv')\nprint(df.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T12:37:22.541156Z","iopub.execute_input":"2025-09-05T12:37:22.541675Z","iopub.status.idle":"2025-09-05T12:37:23.129063Z","shell.execute_reply.started":"2025-09-05T12:37:22.541651Z","shell.execute_reply":"2025-09-05T12:37:23.128345Z"}},"outputs":[{"name":"stdout","text":"   spatial_mean  spatial_std      r_mean      g_mean      b_mean      r_std  \\\n0      5.190323     2.603969  113.664886   66.626678   46.198685  48.768820   \n1      4.976105     2.435567  168.382614  130.600677  102.729263  79.278795   \n2      5.042847     2.408094  167.305817  141.857254  130.756393  70.264726   \n3      4.926498     2.750735  188.519455  135.393112  100.195480  43.096564   \n4      5.068451     2.416592  150.897720  107.960144  100.416214  57.715809   \n\n       g_std      b_std    freq_mean      freq_std  freq_95perc     label  \n0  45.840162  40.974633  2523.638861  22989.991494  7081.331765  pggan_v1  \n1  80.743752  80.094293  2775.627921  40869.948063  8119.750700  pggan_v1  \n2  71.588615  72.709528  2850.683173  41959.723277  7858.940200  pggan_v1  \n3  38.633193  35.209427  2698.706393  38894.790716  6969.821890  pggan_v1  \n4  64.880233  69.182907  2401.086350  34427.688890  6589.236820  pggan_v1  \n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"import os\nimport numpy as np\nfrom PIL import Image\nimport cv2\nfrom skimage.feature import local_binary_pattern\nfrom scipy.fftpack import fft2\nimport csv\n\ndef extract_spatial_features(img_arr):\n    gray = cv2.cvtColor(img_arr, cv2.COLOR_RGB2GRAY)\n    lbp = local_binary_pattern(gray, 8, 1, 'uniform')\n    return lbp.mean(), lbp.std()\n\ndef extract_color_features(img_arr):\n    r_mean = img_arr[:,:,0].mean()\n    g_mean = img_arr[:,:,1].mean()\n    b_mean = img_arr[:,:,2].mean()\n    r_std = img_arr[:,:,0].std()\n    g_std = img_arr[:,:,1].std()\n    b_std = img_arr[:,:,2].std()\n    return r_mean, g_mean, b_mean, r_std, g_std, b_std\n\ndef extract_frequency_features(img_arr):\n    gray = cv2.cvtColor(img_arr, cv2.COLOR_RGB2GRAY)\n    f = np.abs(fft2(gray))\n    return f.mean(), f.std(), np.percentile(f, 95)\n\ndef process_stylegan(input_dir, output_csv):\n    feature_list = []\n    label_list = []\n    for class_folder in os.listdir(input_dir):\n        class_path = os.path.join(input_dir, class_folder)\n        if not os.path.isdir(class_path): continue\n        for root, _, files in os.walk(class_path):\n            for fname in files:\n                if not fname.lower().endswith(('.png', '.jpg', '.jpeg')): continue\n                img_path = os.path.join(root, fname)\n                try:\n                    img = np.array(Image.open(img_path).convert('RGB'))\n                    spatial = extract_spatial_features(img)\n                    color = extract_color_features(img)\n                    freq = extract_frequency_features(img)\n                    features = spatial + color + freq\n                    feature_list.append(features)\n                    label_list.append(class_folder)\n                except Exception as e:\n                    print(f\"Error processing {img_path}: {e}\")\n\n    with open(output_csv, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        header = ['spatial_mean', 'spatial_std', 'r_mean', 'g_mean', 'b_mean', \n                  'r_std', 'g_std', 'b_std', 'freq_mean', 'freq_std', 'freq_95perc', 'label']\n        writer.writerow(header)\n        for feat, label in zip(feature_list, label_list):\n            writer.writerow(list(feat) + [label])\n\n    print(f\"StyleGAN features saved to {output_csv}\")\n\ninput_dir = '/kaggle/working/preprocessed_datasets/stylegan'\noutput_csv = '/kaggle/working/features_stylegan.csv'\nprocess_stylegan(input_dir, output_csv)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T12:39:35.205743Z","iopub.execute_input":"2025-09-05T12:39:35.206487Z","iopub.status.idle":"2025-09-05T12:42:36.173458Z","shell.execute_reply.started":"2025-09-05T12:39:35.206457Z","shell.execute_reply":"2025-09-05T12:42:36.172691Z"}},"outputs":[{"name":"stdout","text":"StyleGAN features saved to /kaggle/working/features_stylegan.csv\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"import pandas as pd\ndf = pd.read_csv('/kaggle/working/features_stylegan.csv')\nprint(df.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T12:49:27.565885Z","iopub.execute_input":"2025-09-05T12:49:27.566611Z","iopub.status.idle":"2025-09-05T12:49:27.610307Z","shell.execute_reply.started":"2025-09-05T12:49:27.566584Z","shell.execute_reply":"2025-09-05T12:49:27.609734Z"}},"outputs":[{"name":"stdout","text":"   spatial_mean  spatial_std      r_mean      g_mean      b_mean       r_std  \\\n0      4.764557     1.732399  153.001236  111.853592   94.522202   57.238100   \n1      4.797958     1.883217  155.179535  129.500793  119.672577   45.401629   \n2      5.202164     2.368723  134.792175  106.708633  103.249817  101.575564   \n3      5.431290     2.373530   68.544785   58.622925   54.855743   63.543089   \n4      4.982285     2.282803  139.889526   96.053925   73.452591   51.654058   \n\n       g_std      b_std    freq_mean      freq_std  freq_95perc label  \n0  48.420146  45.705080  1711.962247  33803.396978  4139.238837  Real  \n1  40.005013  38.852005  2029.736351  36303.509422  6191.698067  Real  \n2  88.648751  75.425849  3150.621034  37189.444512  7559.919907  Real  \n3  40.019939  36.288858  2558.938415  19105.539254  7205.067110  Real  \n4  57.597723  62.973632  3238.257538  30552.079473  8169.561419  Real  \n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"def process_cyclegan(input_dir, output_csv):\n    feature_list = []\n    label_list = []\n    for root, dirs, files in os.walk(input_dir):\n        for fname in files:\n            if not fname.lower().endswith(('.png', '.jpg', '.jpeg')):\n                continue\n            img_path = os.path.join(root, fname)\n            label = os.path.basename(root) \n            try:\n                img = np.array(Image.open(img_path).convert('RGB'))\n                spatial = extract_spatial_features(img)\n                color = extract_color_features(img)\n                freq = extract_frequency_features(img)\n                features = spatial + color + freq\n                feature_list.append(features)\n                label_list.append(label)\n            except Exception as e:\n                print(f\"Error processing {img_path}: {e}\")\n\n    with open(output_csv, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        header = ['spatial_mean', 'spatial_std', 'r_mean', 'g_mean', 'b_mean',\n                  'r_std', 'g_std', 'b_std', 'freq_mean', 'freq_std', 'freq_95perc', 'label']\n        writer.writerow(header)\n        for feat, label in zip(feature_list, label_list):\n            writer.writerow(list(feat) + [label])\n\n    print(f\"CycleGAN features saved to {output_csv}\")\n\ninput_dir = '/kaggle/working/preprocessed_datasets/cyclegan_trainA'\noutput_csv = '/kaggle/working/features_cyclegan_trainA.csv'\nprocess_cyclegan(input_dir, output_csv)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T12:50:13.021534Z","iopub.execute_input":"2025-09-05T12:50:13.021823Z","iopub.status.idle":"2025-09-05T12:50:28.091239Z","shell.execute_reply.started":"2025-09-05T12:50:13.021802Z","shell.execute_reply":"2025-09-05T12:50:28.090612Z"}},"outputs":[{"name":"stdout","text":"CycleGAN features saved to /kaggle/working/features_cyclegan_trainA.csv\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"def process_celebrity_dataset(input_dir, output_csv):\n    feature_list = []\n    label_list = []\n    for root, dirs, files in os.walk(input_dir):\n        for fname in files:\n            if not fname.lower().endswith(('.png', '.jpg', '.jpeg')):\n                continue\n            img_path = os.path.join(root, fname)\n            label = os.path.basename(root) \n            try:\n                img = np.array(Image.open(img_path).convert('RGB'))\n                spatial = extract_spatial_features(img)\n                color = extract_color_features(img)\n                freq = extract_frequency_features(img)\n                features = spatial + color + freq\n                feature_list.append(features)\n                label_list.append(label)\n            except Exception as e:\n                print(f\"Error processing {img_path}: {e}\")\n\n    with open(output_csv, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        header = ['spatial_mean', 'spatial_std', 'r_mean', 'g_mean', 'b_mean',\n                  'r_std', 'g_std', 'b_std', 'freq_mean', 'freq_std', 'freq_95perc', 'label']\n        writer.writerow(header)\n        for feat, label in zip(feature_list, label_list):\n            writer.writerow(list(feat) + [label])\n\n    print(f\"Celebrity dataset features saved to {output_csv}\")\n\ninput_dir = '/kaggle/working/preprocessed_datasets/Celeb-DF'\noutput_csv = '/kaggle/working/features_celebrity_DF.csv'\nprocess_celebrity_dataset(input_dir, output_csv)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T13:01:43.606493Z","iopub.execute_input":"2025-09-05T13:01:43.606824Z","iopub.status.idle":"2025-09-05T13:39:37.704250Z","shell.execute_reply.started":"2025-09-05T13:01:43.606801Z","shell.execute_reply":"2025-09-05T13:39:37.703493Z"}},"outputs":[{"name":"stdout","text":"Celebrity dataset features saved to /kaggle/working/features_celebrity_DF.csv\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"import os\nprint(os.listdir('/kaggle/working'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T13:39:37.705596Z","iopub.execute_input":"2025-09-05T13:39:37.705812Z","iopub.status.idle":"2025-09-05T13:39:37.710111Z","shell.execute_reply.started":"2025-09-05T13:39:37.705794Z","shell.execute_reply":"2025-09-05T13:39:37.709457Z"}},"outputs":[{"name":"stdout","text":"['.virtual_documents', 'features_stylegan.csv', 'features_cyclegan_trainA.csv', 'preprocessed_datasets', 'features_celebrity_DF.csv', 'features_progan.csv']\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"import pandas as pd\nimport os\n\ncsv_files = {\n    '/kaggle/working/features_progan.csv': 'progan',\n    '/kaggle/working/features_stylegan.csv': 'stylegan',\n    '/kaggle/working/features_cyclegan_trainA.csv': 'cyclegan_trainA',\n    '/kaggle/working/features_celebrity_DF.csv': 'celebrity_df'\n}\n\ndf_list = []\n\nfor file_path, source_label in csv_files.items():\n    if os.path.exists(file_path):\n        df = pd.read_csv(file_path)\n        df['dataset_source'] = source_label  # Add source column\n        df_list.append(df)\n    else:\n        print(f\"Warning: File {file_path} not found and will be skipped.\")\n\ncombined_df = pd.concat(df_list, ignore_index=True)\n\nprint(combined_df.shape)\nprint(combined_df['label'].value_counts())\nprint(combined_df['dataset_source'].value_counts())\n\ncombined_csv_path = '/kaggle/working/features_combined.csv'\ncombined_df.to_csv(combined_csv_path, index=False)\nprint(f\"Combined dataset saved to {combined_csv_path}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T13:47:23.720997Z","iopub.execute_input":"2025-09-05T13:47:23.721513Z","iopub.status.idle":"2025-09-05T13:47:27.707055Z","shell.execute_reply.started":"2025-09-05T13:47:23.721490Z","shell.execute_reply":"2025-09-05T13:47:27.706437Z"}},"outputs":[{"name":"stdout","text":"(217019, 13)\nlabel\nCeleb-synthesis    104562\nYouTube-real        38040\nCeleb-real          20555\npggan_v2            19962\npggan_v1            19943\nFake                 7000\nReal                 5890\ncyclegan_trainA      1067\nName: count, dtype: int64\ndataset_source\ncelebrity_df       163157\nprogan              39905\nstylegan            12890\ncyclegan_trainA      1067\nName: count, dtype: int64\nCombined dataset saved to /kaggle/working/features_combined.csv\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}