{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12902846,"sourceType":"datasetVersion","datasetId":8163930},{"sourceId":12903173,"sourceType":"datasetVersion","datasetId":8164165},{"sourceId":12903205,"sourceType":"datasetVersion","datasetId":8164189},{"sourceId":12911685,"sourceType":"datasetVersion","datasetId":8169739}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nprint(\"CUDA available:\", torch.cuda.is_available())\nprint(\"GPU device name:\", torch.cuda.get_device_name(0) if torch.cuda.is_available() else \"No GPU detected\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T08:16:05.595542Z","iopub.execute_input":"2025-08-31T08:16:05.595750Z","iopub.status.idle":"2025-08-31T08:16:09.466225Z","shell.execute_reply.started":"2025-08-31T08:16:05.595723Z","shell.execute_reply":"2025-08-31T08:16:09.465433Z"}},"outputs":[{"name":"stdout","text":"CUDA available: True\nGPU device name: Tesla P100-PCIE-16GB\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/stylegan-dataset/Final Dataset'\nprint(\"Contents:\", os.listdir(input_path))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T08:16:09.467008Z","iopub.execute_input":"2025-08-31T08:16:09.467829Z","iopub.status.idle":"2025-08-31T08:16:09.475587Z","shell.execute_reply.started":"2025-08-31T08:16:09.467800Z","shell.execute_reply":"2025-08-31T08:16:09.475029Z"}},"outputs":[{"name":"stdout","text":"Contents: ['Fake', 'Real', 'dataset.csv']\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import os\nfrom PIL import Image\nimport numpy as np\n\ndef preprocess_recursive(input_path, output_path, target_size=(256, 256)):\n    os.makedirs(output_path, exist_ok=True)\n    processed_count = 0\n    error_count = 0\n    for root, _, files in os.walk(input_path):\n        rel_root = os.path.relpath(root, input_path)\n        out_dir = os.path.join(output_path, rel_root)\n        os.makedirs(out_dir, exist_ok=True)\n        for img_name in files:\n            if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):\n                continue\n            img_path = os.path.join(root, img_name)\n            out_path = os.path.join(out_dir, img_name)\n            try:\n                img = Image.open(img_path).convert('RGB')\n                img = img.resize(target_size, Image.LANCZOS)  # Use LANCZOS instead of ANTIALIAS\n                arr = np.asarray(img) / 255.0  # Normalize to [0, 1]\n                img_out = Image.fromarray((arr * 255).astype(np.uint8))\n                img_out.save(out_path)\n                processed_count += 1\n            except Exception as e:\n                error_count += 1\n                print(f\"Error with {img_path}: {e}\")\n    print(f\"✅ Preprocessing done. Success: {processed_count}, Errors: {error_count}\")\n\n# Usage:\npreprocess_recursive('/kaggle/input/stylegan-dataset/Final Dataset', 'preprocessed_datasets/stylegan', target_size=(256, 256))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T08:16:09.477449Z","iopub.execute_input":"2025-08-31T08:16:09.477689Z","iopub.status.idle":"2025-08-31T08:17:36.037779Z","shell.execute_reply.started":"2025-08-31T08:16:09.477674Z","shell.execute_reply":"2025-08-31T08:17:36.036997Z"}},"outputs":[{"name":"stdout","text":"✅ Preprocessing done. Success: 12890, Errors: 0\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/cyclegan-dataset'\nprint(\"Contents:\", os.listdir(input_path))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T08:17:36.038604Z","iopub.execute_input":"2025-08-31T08:17:36.039329Z","iopub.status.idle":"2025-08-31T08:17:36.045789Z","shell.execute_reply.started":"2025-08-31T08:17:36.039306Z","shell.execute_reply":"2025-08-31T08:17:36.045149Z"}},"outputs":[{"name":"stdout","text":"Contents: ['testB', 'testA', 'trainB', 'trainA', 'metadata.csv']\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/dataset'\nprint(\"Contents:\", os.listdir(input_path))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T08:23:50.319506Z","iopub.execute_input":"2025-08-31T08:23:50.319787Z","iopub.status.idle":"2025-08-31T08:23:50.327809Z","shell.execute_reply.started":"2025-08-31T08:23:50.319757Z","shell.execute_reply":"2025-08-31T08:23:50.327133Z"}},"outputs":[{"name":"stdout","text":"Contents: ['Celeb-DF', 'Celeb-DF-v2']\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"import os\nfrom PIL import Image\nimport numpy as np\n\ndef preprocess_cyclegan(split_path, output_path, target_size=(256, 256)):\n    os.makedirs(output_path, exist_ok=True)\n    processed_count = 0\n    error_count = 0\n\n    for root, _, files in os.walk(split_path):\n        rel_root = os.path.relpath(root, split_path)\n        out_dir = os.path.join(output_path, rel_root)\n        os.makedirs(out_dir, exist_ok=True)\n\n        for img_name in files:\n            if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):\n                continue\n\n            img_path = os.path.join(root, img_name)\n            out_path = os.path.join(out_dir, img_name)\n\n            try:\n                img = Image.open(img_path).convert('RGB')\n                img = img.resize(target_size, Image.LANCZOS)\n                arr = np.asarray(img) / 255.0\n                img_out = Image.fromarray((arr * 255).astype(np.uint8))\n                img_out.save(out_path)\n                processed_count += 1\n            except Exception as e:\n                error_count += 1\n                print(f\"Error processing {img_path}: {e}\")\n\n    print(f\"CycleGAN split preprocessing done. Success: {processed_count}, Errors: {error_count}\")\n\n# Usage example for all splits\nbase_path = '/kaggle/input/cyclegan-dataset'\nsplits = ['trainA', 'trainB', 'testA', 'testB']\n\nfor split in splits:\n    input_dir = os.path.join(base_path, split)\n    output_dir = f'preprocessed_datasets/cyclegan_{split}'\n    preprocess_cyclegan(input_dir, output_dir)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T08:23:50.893423Z","iopub.execute_input":"2025-08-31T08:23:50.893911Z","iopub.status.idle":"2025-08-31T08:24:08.953068Z","shell.execute_reply.started":"2025-08-31T08:23:50.893889Z","shell.execute_reply":"2025-08-31T08:24:08.952458Z"}},"outputs":[{"name":"stdout","text":"CycleGAN split preprocessing done. Success: 1067, Errors: 0\nCycleGAN split preprocessing done. Success: 1334, Errors: 0\nCycleGAN split preprocessing done. Success: 120, Errors: 0\nCycleGAN split preprocessing done. Success: 140, Errors: 0\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"import os\nimport cv2\nfrom PIL import Image\nimport numpy as np\n\ndef extract_and_preprocess_frames(video_path, output_folder, target_size=(256, 256), frame_interval=3):\n    os.makedirs(output_folder, exist_ok=True)\n    cap = cv2.VideoCapture(video_path)\n    count = 0\n    success = True\n    while success:\n        success, frame = cap.read()\n        if not success:\n            break\n        if count % frame_interval == 0:  # Extract every N-th frame\n            img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))\n            img = img.resize(target_size, Image.LANCZOS)\n            arr = np.asarray(img) / 255.0\n            img_out = Image.fromarray((arr * 255).astype(np.uint8))\n            # Save frames in output_folder with unique names using video and frame count\n            img_out.save(os.path.join(output_folder, f\"{os.path.splitext(os.path.basename(video_path))[0]}_frame{count}.jpg\"))\n        count += 1\n    cap.release()\n\ndef preprocess_videos_recursive(input_path, output_root, target_size=(256, 256), frame_interval=3):\n    for root, _, files in os.walk(input_path):\n        # Create a corresponding folder preserving the structure under output_root\n        rel_path = os.path.relpath(root, input_path)\n        out_dir = os.path.join(output_root, rel_path)\n        os.makedirs(out_dir, exist_ok=True)\n\n        for file in files:\n            if file.lower().endswith('.mp4'):\n                video_path = os.path.join(root, file)\n                extract_and_preprocess_frames(video_path, out_dir, target_size, frame_interval)\n\n# Example usage for Celeb-DF and Celeb-DF-v2 folders in Kaggle input\ncelebdf_base = '/kaggle/input/dataset/Celeb-DF'\ncelebdfv2_base = '/kaggle/input/dataset/Celeb-DF-v2'\n\npreprocess_videos_recursive(celebdf_base, '/kaggle/working/preprocessed_datasets/Celeb-DF', target_size=(256, 256), frame_interval=3)\npreprocess_videos_recursive(celebdfv2_base, '/kaggle/working/preprocessed_datasets/Celeb-DF-v2', target_size=(256, 256), frame_interval=3)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T16:12:59.570531Z","iopub.execute_input":"2025-08-31T16:12:59.570756Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/progan'\nprint(\"Contents:\", os.listdir(input_path))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T13:54:29.295882Z","iopub.execute_input":"2025-08-31T13:54:29.296149Z","iopub.status.idle":"2025-08-31T13:54:29.308070Z","shell.execute_reply.started":"2025-08-31T13:54:29.296127Z","shell.execute_reply":"2025-08-31T13:54:29.307323Z"}},"outputs":[{"name":"stdout","text":"Contents: ['pggan_v1', 'pggan_v2']\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import os\nfrom PIL import Image\nimport numpy as np\n\ndef preprocess_progan(input_base, output_base, target_size=(256, 256)):\n    for subfolder in ['pggan_v1', 'pggan_v2']:\n        input_path = os.path.join(input_base, subfolder)\n        output_path = os.path.join(output_base, subfolder)\n        os.makedirs(output_path, exist_ok=True)\n        processed_count = 0\n        error_count = 0\n        for root, _, files in os.walk(input_path):\n            rel_root = os.path.relpath(root, input_path)\n            out_dir = os.path.join(output_path, rel_root)\n            os.makedirs(out_dir, exist_ok=True)\n            for img_name in files:\n                if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):\n                    continue\n                img_path = os.path.join(root, img_name)\n                out_path = os.path.join(out_dir, img_name)\n                try:\n                    img = Image.open(img_path).convert('RGB')\n                    img = img.resize(target_size, Image.LANCZOS)\n                    arr = np.asarray(img) / 255.0\n                    img_out = Image.fromarray((arr * 255).astype(np.uint8))\n                    img_out.save(out_path)\n                    processed_count += 1\n                except Exception as e:\n                    error_count += 1\n                    print(f\"Error with {img_path}: {e}\")\n        print(f\"✅ Preprocessing {subfolder} done. Success: {processed_count}, Errors: {error_count}\")\n\n# Usage:\nprogan_input = '/kaggle/input/progan'\nprogan_output = '/kaggle/working/preprocessed_datasets/progan'\npreprocess_progan(progan_input, progan_output, target_size=(256, 256))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T13:54:34.246577Z","iopub.execute_input":"2025-08-31T13:54:34.246838Z","iopub.status.idle":"2025-08-31T14:23:53.209648Z","shell.execute_reply.started":"2025-08-31T13:54:34.246818Z","shell.execute_reply":"2025-08-31T14:23:53.209016Z"}},"outputs":[{"name":"stdout","text":"✅ Preprocessing pggan_v1 done. Success: 19943, Errors: 0\n✅ Preprocessing pggan_v2 done. Success: 19962, Errors: 0\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}