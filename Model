{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12902846,"sourceType":"datasetVersion","datasetId":8163930},{"sourceId":12903173,"sourceType":"datasetVersion","datasetId":8164165},{"sourceId":12903205,"sourceType":"datasetVersion","datasetId":8164189},{"sourceId":12907937,"sourceType":"datasetVersion","datasetId":8167445}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nprint(\"CUDA available:\", torch.cuda.is_available())\nprint(\"GPU device name:\", torch.cuda.get_device_name(0) if torch.cuda.is_available() else \"No GPU detected\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T04:02:43.520753Z","iopub.execute_input":"2025-08-30T04:02:43.521011Z","iopub.status.idle":"2025-08-30T04:02:48.078536Z","shell.execute_reply.started":"2025-08-30T04:02:43.520965Z","shell.execute_reply":"2025-08-30T04:02:48.077670Z"}},"outputs":[{"name":"stdout","text":"CUDA available: True\nGPU device name: Tesla P100-PCIE-16GB\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import os\n\ninput_path = '/kaggle/input/stylegan-dataset/Final Dataset'\nprint(\"Contents:\", os.listdir(input_path))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T04:03:48.131688Z","iopub.execute_input":"2025-08-30T04:03:48.132084Z","iopub.status.idle":"2025-08-30T04:03:48.137644Z","shell.execute_reply.started":"2025-08-30T04:03:48.132052Z","shell.execute_reply":"2025-08-30T04:03:48.136909Z"}},"outputs":[{"name":"stdout","text":"Contents: ['Fake', 'Real', 'dataset.csv']\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import os\nfrom PIL import Image\nimport numpy as np\n\ndef preprocess_recursive(input_path, output_path, target_size=(256, 256)):\n    os.makedirs(output_path, exist_ok=True)\n    processed_count = 0\n    error_count = 0\n    for root, _, files in os.walk(input_path):\n        rel_root = os.path.relpath(root, input_path)\n        out_dir = os.path.join(output_path, rel_root)\n        os.makedirs(out_dir, exist_ok=True)\n        for img_name in files:\n            if not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):\n                continue\n            img_path = os.path.join(root, img_name)\n            out_path = os.path.join(out_dir, img_name)\n            try:\n                img = Image.open(img_path).convert('RGB')\n                img = img.resize(target_size, Image.LANCZOS)  # Use LANCZOS instead of ANTIALIAS\n                arr = np.asarray(img) / 255.0  # Normalize to [0, 1]\n                img_out = Image.fromarray((arr * 255).astype(np.uint8))\n                img_out.save(out_path)\n                processed_count += 1\n            except Exception as e:\n                error_count += 1\n                print(f\"Error with {img_path}: {e}\")\n    print(f\"✅ Preprocessing done. Success: {processed_count}, Errors: {error_count}\")\n\n# Usage:\npreprocess_recursive('/kaggle/input/stylegan-dataset/Final Dataset', 'preprocessed_datasets/stylegan', target_size=(256, 256))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T04:06:42.311702Z","iopub.execute_input":"2025-08-30T04:06:42.312142Z","iopub.status.idle":"2025-08-30T04:08:57.791331Z","shell.execute_reply.started":"2025-08-30T04:06:42.312106Z","shell.execute_reply":"2025-08-30T04:08:57.790335Z"}},"outputs":[{"name":"stdout","text":"✅ Preprocessing done. Success: 12890, Errors: 0\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}